{"ast":null,"code":"function bourbonReducer(state = {\n  bourbons: [],\n  loading: false\n}, action) {\n  let idx;\n\n  switch (action.type) {\n    case 'LOADING_BOURBONS':\n      return { ...state,\n        loading: true\n      };\n\n    case 'BOURBONS':\n      return { ...state,\n        bourbons: action.payload,\n        loading: false\n      };\n\n    case 'NEW_BOURBON':\n      return { ...state,\n        bourbons: [...state.bourbons, action.payload],\n        loading: false\n      };\n\n    case 'DELETE_BOURBON':\n      idx = state.bourbons.filter(bourbon => bourbon.id === action.payload);\n      debugger;\n      return { ...state,\n        bourbons: [[...state.bourbons.slice(0, idx), ...state.bourbons.slice(idx + 1)]]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default bourbonReducer;","map":{"version":3,"sources":["/Users/user/Development/projects/bourbon_journal/bourbon_journal_frontend/src/reducers/bourbonReducer.js"],"names":["bourbonReducer","state","bourbons","loading","action","idx","type","payload","filter","bourbon","id","slice"],"mappings":"AAAA,SAASA,cAAT,CACIC,KAAK,GAAG;AACNC,EAAAA,QAAQ,EAAE,EADJ;AAENC,EAAAA,OAAO,EAAE;AAFH,CADZ,EAKIC,MALJ,EAMM;AACF,MAAIC,GAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAK,kBAAL;AACI,aAAO,EAAC,GAAGL,KAAJ;AAAWE,QAAAA,OAAO,EAAE;AAApB,OAAP;;AAEJ,SAAK,UAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWC,QAAAA,QAAQ,EAAEE,MAAM,CAACG,OAA5B;AAAqCJ,QAAAA,OAAO,EAAE;AAA9C,OAAP;;AAEJ,SAAK,aAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBE,MAAM,CAACG,OAA3B,CAArB;AAA0DJ,QAAAA,OAAO,EAAE;AAAnE,OAAP;;AAEJ,SAAK,gBAAL;AACIE,MAAAA,GAAG,GAAGJ,KAAK,CAACC,QAAN,CAAeM,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAgBN,MAAM,CAACG,OAAxD,CAAN;AACA;AACA,aAAO,EAAC,GAAGN,KAAJ;AAAWC,QAAAA,QAAQ,EAAE,CAAC,CAAC,GAAGD,KAAK,CAACC,QAAN,CAAeS,KAAf,CAAqB,CAArB,EAAwBN,GAAxB,CAAJ,EAAkC,GAAGJ,KAAK,CAACC,QAAN,CAAeS,KAAf,CAAqBN,GAAG,GAAG,CAA3B,CAArC,CAAD;AAArB,OAAP;;AAEJ;AACI,aAAOJ,KAAP;AAhBR;AAkBH;;AAED,eAAeD,cAAf","sourcesContent":["function bourbonReducer(\n    state = {\n      bourbons: [], \n      loading: false\n    },\n    action\n    ) {\n    let idx;\n    switch (action.type) {\n        case 'LOADING_BOURBONS':\n            return {...state, loading: true};\n        \n        case 'BOURBONS':\n            return {...state, bourbons: action.payload, loading: false};\n\n        case 'NEW_BOURBON':\n            return {...state, bourbons: [...state.bourbons, action.payload], loading: false}     \n\n        case 'DELETE_BOURBON': \n            idx = state.bourbons.filter(bourbon => bourbon.id  === action.payload)\n            debugger\n            return {...state, bourbons: [[...state.bourbons.slice(0, idx), ...state.bourbons.slice(idx + 1)]]};\n  Â \n        default:\n            return state;\n    }\n}\n\nexport default bourbonReducer"]},"metadata":{},"sourceType":"module"}